
// MyTaskbar.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "MyTaskbar.h"
#include "MyTaskbarDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//#define WM_SWITCH_SHOW_MSG WM_USER + 310 //自定义消息，用于和主程序通信
///////////////////////////////////////////
// CMyTaskbarApp

BEGIN_MESSAGE_MAP(CMyTaskbarApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CMyTaskbarApp 构造

CMyTaskbarApp::CMyTaskbarApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CMyTaskbarApp 对象

CMyTaskbarApp theApp;
CDynamicLogger Logger;
HANDLE m_hMutex;


// CMyTaskbarApp 初始化

BOOL CMyTaskbarApp::InitInstance()
{
	//注册窗口类
	WNDCLASS wc;
	::GetClassInfo(AfxGetInstanceHandle(),L"#32770",&wc);
	//此处的类名需要先在rc文件中添加：CLASS "CMyTaskbarDlg"
	wc.lpszClassName=L"CMyTaskbarDlg";
	bool flag=AfxRegisterClass(&wc);  //注册

	
	//m_hMutex = ::CreateMutexW(NULL,FALSE,_T("MyTaskbar"));
	m_hMutex = ::CreateMutexW(NULL,FALSE,m_pszExeName);

	//判断互斥量是否存在
	if(GetLastError() == ERROR_ALREADY_EXISTS)
	{
		//AfxMessageBox(_T("应用程序已经运行!"));
	
		HWND hwnd=FindWindow(L"CMyTaskbarDlg",NULL);
		if(hwnd)
		{
			CMyTaskbarDlg *pDlg=(CMyTaskbarDlg*)CWnd::FromHandle(hwnd);
			if(pDlg) pDlg->SwitchWindowShow();   //显示窗口
		}
		

		return false;
	}
	else
	{
		//AfxMessageBox(_T("应用程序第一次运行"));
	}

	
	if(Logger==NULL)
	{
		AfxMessageBox(L"日志引擎启动失败！");
	}
	else
	{
		Logger->Init();
		Logger->Info(L"==========================================");
		Logger->Info(L"程序启动");

	}


	/////////////////////////////////////////////////////

	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	/////////////////////////////////GDIPlus03////////////////////////////////////
	//初始化
	Gdiplus::GdiplusStartupInput gdiplusStartupInput;
	Gdiplus::GdiplusStartup(&m_gdiplusToken, &gdiplusStartupInput, NULL);
	//////////////////////////////GDIPlus////////////////////////////////////////


	CWinApp::InitInstance();

	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));

	CMyTaskbarDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}

	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。

	//CoInitialize(NULL); 

	return FALSE;
}



int CMyTaskbarApp::ExitInstance()
{
	// TODO: 在此添加专用代码和/或调用基类


	/////////////////////////////////GDIPlus04/////////////////////////////////////	
	Gdiplus::GdiplusShutdown(m_gdiplusToken);  //关闭
	/////////////////////////////////GDIPlus/////////////////////////////////////

	//CoUninitialize();
	if(m_hMutex != NULL)
	{
		CloseHandle(m_hMutex);	//关闭句柄
	}

	
	//LPCTSTR desc = ::ILogger_GetErrorDesc(Logger->GetLastError());
	//std::cerr << "ERROR: " << T2A((LPTSTR)desc) << std::endl;


	return CWinApp::ExitInstance();
}
